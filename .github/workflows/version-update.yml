name: Version Update

# IMPORTANT: To fully enforce this workflow as a requirement for merging:
# 1. Go to repository Settings > Branches > Branch protection rules
# 2. Create a rule for your main branch
# 3. Enable "Require status checks to pass before merging"
# 4. Search for and select "Update Version and Changelog" as a required status check

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write  # Required for creating check runs

jobs:
  update_version:
    name: Update Version and Changelog
    runs-on: ubuntu-latest
    # Using multiple contains() checks for different casings instead of lower()
    if: contains(github.event.pull_request.title, '[release]') || contains(github.event.pull_request.title, '[Release]') || contains(github.event.pull_request.title, '[RELEASE]')

    steps:
    - name: Validate Release PR
      run: |
        # Convert PR title to lowercase for case-insensitive comparison
        PR_TITLE_LOWER=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]')
        if [[ "$PR_TITLE_LOWER" == *"[release]"* ]]; then
          echo "This is a release PR. Version update is required."
        else
          echo "Not a release PR, but this should not happen due to the job-level 'if' condition."
          exit 1
        fi

    - uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Process PR Description for Changelog
      id: process_description
      run: |
        echo "${{ github.event.pull_request.title }}" > pr_title.txt
        
        # Save PR description to file
        cat << 'EOF' > pr_description.txt
        ${{ github.event.pull_request.body }}
        EOF
        
        # Print PR description for debugging
        echo "PR Description:"
        cat pr_description.txt
        
        # Extract checklist items from PR description if they exist
        if grep -q "\- \[x\]" pr_description.txt; then
          echo "Found checklist items in PR description"
          # Extract lines with "- [x]" and remove the "- [x]" prefix
          grep "\- \[x\]" pr_description.txt | sed 's/- \[x\] */- /g' > pr_changes.txt
          echo "Extracted checklist items:"
          cat pr_changes.txt
        else
          echo "No checklist items found in PR description, using PR title instead"
          # Case-insensitive removal of [release] tag from the title
          echo "${{ github.event.pull_request.title }}" | sed -E 's/\[release\]//i' | sed 's/^\s*//' > pr_changes.txt
        fi
        
        # Create the diff file for analysis
        git log --pretty=format:"%s" origin/${{ github.base_ref }}..origin/${{ github.head_ref }} >> pr_changes_log.txt
        git diff origin/${{ github.base_ref }}..origin/${{ github.head_ref }} > pr_diff.txt
    
    - name: Run version update script
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: python scripts/version_update.py
    
    - name: Commit and push if there are changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        # Only add the specific files we want to commit
        git add changelog.md changelog.txt hostinger-affiliate-plugin.php
        git commit -m "Update version and changelog [skip ci]" || echo "No changes to commit"
        git push
        
    - name: Cleanup temporary files
      if: always()
      run: |
        rm -f pr_title.txt pr_description.txt pr_changes.txt pr_diff.txt pr_changes_log.txt 